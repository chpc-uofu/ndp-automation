---
- name: Create new NDP VMs
  hosts: 127.0.0.1
  connection: local
  gather_facts: no

  tasks:
    - name: Full clone from template
      vars:
        new_vm_id: "{{ hostvars[item]['vm_id'] }}"
        template_proxmox_node: "{{ hostvars[groups['ndp_templates'][0]]['proxmox_node'] }}"
        template_vm_id: "{{ hostvars[groups['ndp_templates'][0]]['vm_id'] }}"
      community.general.proxmox_kvm:
        api_user: "{{ proxmox_user }}"
        api_password: "{{ proxmox_password }}"
        api_host: "{{ hostvars[item]['proxmox_node'] }}"
        clone: does-not-matter
        vmid: "{{ template_vm_id }}"
        newid: "{{ new_vm_id }}"
        full: yes
        name: "{{ hostvars[item]['inventory_hostname'] }}"
        node: "{{ template_proxmox_node }}"
        target: "{{ hostvars[item]['proxmox_node'] }}"
        storage: "{{ proxmox_storage_pool }}"
        format: raw
        timeout: 3000
      loop: "{{ groups['ndp_management'] + groups['ndp_vms'] }}"

    - name: Retrieve information about specific VM by ID
      vars:
        new_vm_id: "{{ hostvars[item]['vm_id'] }}"
      community.general.proxmox_vm_info:
        api_user: "{{ proxmox_user }}"
        api_password: "{{ proxmox_password }}"
        api_host: "{{ hostvars[item]['proxmox_node'] }}"
        # node: "{{ hostvars[item]['proxmox_node'] }}"  ## Want to look at all nodes.
        type: qemu
        vmid: "{{ new_vm_id }}"
      loop: "{{ groups['ndp_management'] + groups['ndp_vms'] }}"
      register: current_vms_info
    
    - name: Set additional facts
      ansible.builtin.set_fact:
        current_vms_stopped: "{{ (current_vms_info['results'] | map(attribute='proxmox_vms')) | flatten | selectattr('status', 'eq', 'stopped') | map(attribute='vmid') }}"

    - name: Only forcibly update networking for stopped VMs
      when: hostvars[item]['vm_id'] in current_vms_stopped
      vars:
        new_vm_mac_addr: "{{ hostvars[item]['vm_network_adapters_mac_address'] }}"
      community.general.proxmox_kvm:
        api_user: "{{ proxmox_user }}"
        api_password: "{{ proxmox_password }}"
        api_host: "{{ hostvars[item]['proxmox_node'] }}"
        name: "{{ hostvars[item]['inventory_hostname'] }}"
        vmid: "{{ hostvars[item]['vm_id'] }}"
        node: "{{ hostvars[item]['proxmox_node'] }}"
        net:
          net0: 'virtio={{ new_vm_mac_addr }},bridge=vmbr1,tag=1702'
        update: yes
        update_unsafe: yes # necessary to force net0 updates
      loop: "{{ groups['ndp_management'] + groups['ndp_vms'] }}"

    - name: Only resize disks for stopped VMs
      when: hostvars[item]['vm_id'] in current_vms_stopped
      community.general.proxmox_disk:
        api_user: "{{ proxmox_user }}"
        api_password: "{{ proxmox_password }}"
        api_host: "{{ hostvars[item]['proxmox_node'] }}"
        vmid: "{{ hostvars[item]['vm_id'] }}"
        disk: scsi0
        size: "{{ hostvars[item]['vm_os_disk_size'] }}"
        state: resized
      loop: "{{ groups['ndp_management'] + groups['ndp_vms'] }}"

    - name: Ensure VMs are started
      vars:
        new_vm_id: "{{ hostvars[item]['vm_id'] }}"
      community.general.proxmox_kvm:
        api_user: "{{ proxmox_user }}"
        api_password: "{{ proxmox_password }}"
        api_host: "{{ hostvars[item]['proxmox_node'] }}"
        vmid: "{{ new_vm_id }}"
        state: started
      loop: "{{ groups['ndp_management'] + groups['ndp_vms'] }}"
